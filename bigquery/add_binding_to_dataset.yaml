main:
    params: [input]
    steps:
    - get_input:
        assign:
            - project_id: ${default(map.get(input, "project_id"), sys.get_env("GOOGLE_CLOUD_PROJECT_ID"))}
            - dataset_id: ${default(map.get(input, "dataset_id"), Null)}
            - role_id: ${default(map.get(input, "role_id"), Null)}
            - group_email: ${default(map.get(input, "group_email"), Null)}
            - service_account_email: ${default(map.get(input, "service_account_email"), Null)}
            - user_email: ${default(map.get(input, "user_email"), Null)}  

    - prepare_acl:
        steps:
            - define_access_entry:
                switch:
                    - condition: ${group_email != Null}
                      assign:
                            - new_acl:
                                role: ${role_id}
                                groupByEmail: ${group_email}

                    - condition: ${service_account_email != Null}
                      assign:
                            - new_acl:
                                role: ${role_id}
                                userByEmail: ${service_account_email}

                    - condition: ${user_email != Null}
                      assign:
                            - new_acl:
                                role: ${role_id}
                                userByEmail: ${user_email}

                    - condition: true
                      return: "you need to supply a service account, user or group email"

    - get_current_binding:
        call: googleapis.bigquery.v2.datasets.patch
        args:
            datasetId: "analysis_area_info"
            projectId: ${project_id}
        result: get_result



    - add_to_existing_acl:
        assign:
          - access_list: ${get_result.access}
          - access_list: ${list.concat(access_list, new_acl)} 

    - apply_binding:
        call: googleapis.bigquery.v2.datasets.patch
        args:
            datasetId: ${dataset_id}
            projectId: ${project_id}
            body:
                access: ${access_list}   
        result: binding_result

    - returnOutput:
            return: '${binding_result}'
