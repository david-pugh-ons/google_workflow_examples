
main:
    params: [input]
    steps:
      - get_inputs:
          assign:
            - firestore_project_id: ${default(map.get(input, "firestore_project_id"), sys.get_env("GOOGLE_CLOUD_PROJECT_ID"))}
            - firestore_region: ${default(map.get(input, "firestore_project_id"), sys.get_env("GOOGLE_CLOUD_LOCATION"))}
            - firestore_database: ${default(map.get(input, "firestore_database"), "(default)")}
            - collection: ${default(map.get(input, "collection"), "user_ex2")}
            - instance: ${map.get(input, "instance")}

      - init:
          assign:
            - datetime_now: ${time.format(sys.now())}

      - check_inputs:
          switch:
            - condition: ${instance == Null OR map.get(instance, "name") == Null}
              raise: "Input Error: you need to supply an instance map, and it must contain the instance name key."      

      - update_firestore:
            try:
              call: googleapis.firestore.v1.projects.databases.documents.patch
              args:
                name: ${"projects/" + firestore_project_id + "/databases/" + firestore_database + "/documents/" + collection + "/" + instance.user_email +  "/workspace/workbench/notebooks/" + instance.name}
                body:
                  fields:
                    api:
                      stringValue: ${default(map.get(instance, "api"), "")}
                    instanceName:
                      stringValue: ${default(map.get(instance, "name"), "")}
                    userEmail:
                      stringValue: ${default(map.get(instance, "user_email"), "")}
                    location:
                      stringValue: ${default(map.get(instance, "location"), "")}
                    region:
                      stringValue: ${default(map.get(instance, "region"), "")}
                    zone:
                      stringValue: ${default(map.get(instance, "zone"), "")}
                    projectId:
                      stringValue: ${default(map.get(instance, "project_id"), "")}
                    type:  
                      stringValue: ${default(map.get(instance, "type"), "")}
                    accessMode:
                      stringValue: ${default(map.get(instance, "access_mode"), "")} 
                    uri:
                      stringValue: ${default(map.get(instance, "uri"), "")}
                    machineType:
                      stringValue: ${default(map.get(instance, "machine_type"), "")}
                    createTime:
                      stringValue: ${default(map.get(instance, "create_time"), "")}
                    language:
                      stringValue: ${default(map.get(instance, "language"), "")}
                    serviceAccount:
                      stringValue: ${default(map.get(instance, "service_account"), "")}
                    lastUpdated:
                      stringValue: ${datetime_now}
                    state:
                      stringValue: ${default(map.get(instance, "state"), "")}
                    framework:
                      stringValue: ${default(map.get(instance, "framework"), "")}
                    version:
                      stringValue: ${default(map.get(instance, "version"), "")}
                    researchArea:
                      stringValue: ${default(map.get(instance, "research_area"), "")}

              result: patch_response
            except:            
               as: e
               steps:
                 - unhandled_fs_exception:
                           raise: ${e}
      - complete:
          return: ${patch_response}
