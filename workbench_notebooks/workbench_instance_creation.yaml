# This is a sample workflow to create an AI Workbench Instance.
# It will also optionally add an entry representing the notebook into Firestore
# This relies on a numbe rof child workflows, that are are included in this repo

# - zone: Zone where Instance should be located (Optional, defaults to "a") STRING
# - project_id: Project that the Instance should be placed, (Optional, defaults to project where Workflow is being run) STRING
# - network_id: Network (Optional, defaults to "notebook-network") STRING
# - subnet_id: Subnet (Optional, defaults to "notebook-subnet") STRING

# - ref: short string to give the instance a unique name if a user has multiple Instances in same project, eg "01" (optional, defaults to "") STRING
# - user_email: email of the user or group who will have access to the Instance STRING
 
# - machine_type: optional machine type of underlying VM (Optional, defaults to "e2-standard-2") STRING
# - service_account_email: email of the VM service account  STRING

# - access_mode: either "mail" (single user) or "service_Account" (optional, defaults to mail) STRING
# - image_family: Optional, defaults to "workbench-instances" STRING
# - image_project: Optional, defaults to "cloud-notebooks-managed" STRING
# - post_startup_script: Location of post start up script (optional, defaults to "") STRING
# - instance_idle_timeout: Timeout before the instance auto shuts down when idle, in s (Optional, defaults to 10800) INTEGER
# - disable_root: Whether to disable root access (optional, defaults to false) BOOLEAN
# - disable_terminal: Whether to disable terminal access (optional, defaults to false) BOOLEAN
# - disable_dataproc_kernels: Whether to disable dataprox kernel access (optional, defaults to false) BOOLEAN

# Workflow define_settings
#    - workflow_delay: the delay between creating the instance and checking its status, in seconds (optional, defaults to 15) INTEGER
# Firestore options
#   - add_firestore_doc: whether to add an appropriate Firestore document (optional, defaults to False) BOOLEAN
#   - collection: name of the Firestore collection (optional, defaults to notebooks_list) STRING
#   - firestore:project_id: defaults to the project_id given above if not supplied STRING

main:
    params: [input]
    steps:
        - get_inputs:
            assign:
                
                - zone: ${default(map.get(input, "zone"), "a")}
                - project_id: ${default(map.get(input, "project_id"), sys.get_env("GOOGLE_CLOUD_PROJECT_ID"))}
                - network_id: ${default(map.get(input, "network"),"notebook-network")}
                - subnet_id: ${default(map.get(input, "subnet"), "notebook-subnet")}
                - research_area: ${default(map.get(input, "research_area"), Null)}

                - ref: ${default(map.get(input, "ref"), "")}
                - user_email: ${default(map.get(input, "user_email"), Null)}
                - instance_id: ${default(map.get(input, "instance_id"), Null)}
                - machine_type: ${default(map.get(input, "machine_type"), "e2-standard-4")}
                - service_account_email: ${default(map.get(input, "service_account"), Null)}

                - access_mode: ${default(map.get(input, "access_mode"), "mail")}
                - image_family: ${default(map.get(input, "image_family"), "workbench-instances")}
                - image_project: ${default(map.get(input, "image_project"), "cloud-notebooks-managed")}
                - post_startup_script: ${default(map.get(input, "post_startup_script"), "")}
                - instance_idle_timeout: ${default(map.get(input, "instance_idle_timeout"), 10800)}
                - disable_root: ${default(map.get(input, "disable_root"), false)}
                - disable_terminal: ${default(map.get(input, "disable_terminal"), false)}
                - disable_dataproc_kernels: ${default(map.get(input, "disable_dataproc_kernels"), false)} 

                # Workflow define_settings
                - workflow_delay: ${default(map.get(input, "delay"), 30)}

                # Firestore options
                - add_firestore_doc: ${default(map.get(input, "add_firestore_doc"), false)}
                - collection: ${default(map.get(input, "collection"), "notebooks_list")}
                - firestore_project_id: ${default(map.get(input, "firestore_project_id"), project_id)}

                # WIP and Review Bucket roles
                - analyst_wip_bucket_role_id: ${default(map.get(input, "wip_bucket_role_id"), Null)}
                - analyst_wip_dataset_role_id: ${map.get(input, "wip_dataset_role_id")}


        - init:
            steps:
                - check_inputs:
                    switch:
                       - condition: ${access_mode == "mail" and user_email == Null } 
                         return: "You need to supply a user email if you are using single user access (mail) access mode"
                       - condition: ${access_mode == "service_account" and service_account_email == Null } 
                         return: "You need to supply a service account email if you are using sa access access mode"


                - define_ref:
                    switch:
                        - condition: ${ref != ""}
                          assign:
                            - ref: '${"-"+ref}'

                - define_research_area:
                    switch:
                        - condition: ${research_area == Null AND text.find_all("ons-ids-analysis", project_id) == Null }
                          assign:
                            - project_short: ${text.replace_all(project_id, "ons-ids-analysis", "")}
                            - project_list: ${text.split(project_short, "-")}
                            - research_area: '${project_list[2]}'
                        - condition: ${research_area != Null}  
                          next: define_wip_and_review_areas
                        - condition: true
                          return: ${"Cannot extract research area from the project name " + project_id + ". If this is not an IDS analysis project please supply the unique research area variable in the input"}           

                - define_wip_and_review_areas:
                    assign:
                        - wip_bucket: ${project_id + "-" + research_area + "-wip"}
                        - review_bucket: ${project_id + "-" + research_area + "-review"}
                        - dataset_prefix: ${text.replace_all(research_area, "-", "_")}
                        - wip_dataset: ${dataset_prefix + "_wip_notebook"}
                        - review_dataset: ${dataset_prefix + "_review_notebook"}
                    next: define_settings   

                - define_settings:            
                    assign:
                        - datetime: ${time.parse(time.format(sys.now()))}
                        - api_url: "https://notebooks.googleapis.com/v2/"
                        - region: ${sys.get_env("GOOGLE_CLOUD_LOCATION")}
                        - full_zone: '${region+"-"+zone}'
                        - language: "all"
                        - api: "v2"
                        - database: "(default)" # connector only works with default
                        - type: "workbench-instance"
                        - datetime_now: ${time.format(sys.now())}



                        # Default response
                        - create_response: ""
                        - get_response: ""
                        - patch_response: ""
                        - create_status: 
                            state: "unknown"
                            comment: ""

                        # Project Level Roles for Service Account
                        - project_level_roles: [
                            "roles/logging.logWriter", 
                            "roles/monitoring.metricWriter", 
                            "projects/sandbox-pughd/roles/luda.notebook.serviceaccount",
                            "projects/sandbox-pughd/roles/test.analysis.notebook.viewer",
                            "projects/sandbox-pughd/roles/test.analysis.bq.job.create"
                         ]    

                - define_url:
                    assign:     
                    # Set up URL for call
                      - workbench_parent: '${"projects/"+project_id+"/locations/"+full_zone}'
                      

                - determine_access_method:
                    switch:
                        - condition: ${access_mode == "mail"} 
                          assign:
                            # Extract user name and create unique NB Name and service account name
                            - user_name: '${text.split(user_email, "@")}'
                            - user_name_list: '${text.split(user_name[0], ".")}'
                            - instance_id: '${ text.substring("nb-" + research_area + "-" + user_name_list[1] + "-" + user_name_list[0]+ref, 0, 62)}'
                            - service_account_name: '${ "n-" + research_area +  ref + "-" + user_name_list[1] + "-" + user_name_list[0]}'
                          next: service_account  
                        - condition: ${access_mode == "service_account"}
                          next: create_workbench_instance                   

        # Create service_account
        - service_account:
            steps:
                - check_sa_inputs:
                    switch:
                        - condition: ${access_mode != "mail" and service_account_email == Null}
                          return: ${"You need to supply the service account email for sa access mode"}
                        - condition: ${access_mode == "mail"}
                          next: create_service_account
                        - condition: true
                          next: create_workbench_instance  

                - create_service_account:
                    call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
                    args:
                        workflow_id: workflow-service-account-creation
                        argument:
                            project_id: ${project_id}
                            name: ${service_account_name}
                            display_name: ${"Workbench Instance sa for " + user_email }
                            display_description: ${"Service Account running Workbench Instance " + instance_id + " for " + user_email}
                    result: sa_execution_result
                    next: extract_service_account_email        
                
                - extract_service_account_email:
                    switch:
                        - condition: ${sa_execution_result.code == 200}
                          assign:
                            - service_account_email: ${sa_execution_result.body.email}
                          next: apply_service_account_bindings 
                        - condition: true
                          return: ${"could not create service account"}

        # give service account and user appropriate permissions to create and run notebook
        # sa needs notebook and monitoring
        # user requires roles/iam.serviceAccountUser on the sa

        - apply_service_account_bindings:
            steps:
                - apply_project_level_bindings:
                    # parallel: it doesnt like parallel here!
                        for:
                            value: role
                            in: ${project_level_roles}
                            steps:
                                - apply_project_role:
                                    call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
                                    args:
                                        workflow_id: workflow-iam-binding
                                        argument: 
                                            project_id: ${project_id}
                                            members: ${["serviceAccount:"+service_account_email]}
                                            role_id: ${role}
                                            method: "append"
                - apply_service_accout_user:
                    call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
                    args:
                        workflow_id: workflow-serviceaccount-binding
                        argument:
                            project_id: ${project_id}
                            service_account_email: ${service_account_email}
                            members: ${["user:" + user_email]}
                            role_id: "roles/iam.serviceAccountUser"
                            method: "append"

            next: create_workbench_instance         

        # Create the Instance
        - create_workbench_instance:
            steps:
                - create:
                    try:
                        call: http.post
                        args:
                            url: '${api_url + workbench_parent + "/instances?instanceId=" + instance_id}'
                            auth:
                                type: OAuth2
                                scopes: 'https://www.googleapis.com/auth/cloud-platform'
                            body:
                                instanceOwners: '${user_email}'
                                gceSetup:
                                    machineType: '${machine_type}'
                                    serviceAccounts:
                                        - email: '${service_account_email}'
                                    vmImage:
                                        project: ${image_project}
                                        family: ${image_family}
                                    networkInterfaces:
                                        network: '${"projects/"+project_id+"/global/networks/"+network_id}'
                                        subnet: '${"projects/"+project_id+"/regions/"+region+"/subnetworks/"+subnet_id}'
                                    metadata:
                                        proxy-mode: '${access_mode}'
                                        proxy-user-mail: '${user_email}'
                                        notebook-disable-downloads: 'true'
                                        notebook-disable-nbconvert: 'true'
                                        notebook-enable-delete-to-trash: 'false'
                                        notebook-disable-root: '${string(disable_root)}'
                                        notebook-disable-terminal: '${string(disable_terminal)}'
                                        disable-mixer: '${string(disable_dataproc_kernels)}'
                                        idle-timeout-seconds: '${string(instance_idle_timeout)}'
                                        report-notebook-metrics: 'true'
                                        report-system-health: 'true'
                                        report-event-health: 'true'
                                        install-monitoring-agent: 'true'
                                        block-project-ssh-keys: 'true'
                                        report-dns-resolution: 'true'

                            query:
                                instanceId: '${instance_id}'    
                        result: create_response
                    except:
                        as: e
                        steps:
                            - known_errors:
                                switch:
                                - condition: ${not("HttpError" in e.tags)}
                                  assign: 
                                    - create_status: "Connection problem."
                                  next: complete

                                - condition: ${e.code == 404}
                                  assign: 
                                    - create_status: 
                                        state: False
                                        comment: "URL wasn’t found."
                                  next: complete

                                - condition: ${e.code == 403}
                                  assign:
                                    - create_status: 
                                        state: False
                                        comment: "Authentication error."
                                  next: complete

                                - condition: ${e.code == 409}
                                  assign:
                                    - create_status: 
                                        state: False
                                        comment: "Notebook already exists."
                                  next: complete

                            - unhandled_exception:
                                raise: ${e}
                - update_status:
                    assign: 
                        - create_status: 
                            state: True
                            omment: "Success"



        # Add delay so that Instance is deployed and we can extract details such as uri
        - delay:
            call: sys.sleep
            args:
                seconds: ${workflow_delay}
            next: get_workbench_instance_details

        # Get details of the Workbench Instance - some of these are assigned on creation by Google
        - get_workbench_instance_details:
            call: http.get
            args:
                url: '${api_url+"projects/"+project_id+"/locations/"+full_zone+"/instances/"+instance_id}'
                auth:
                    type: OAuth2
                    scopes: 'https://www.googleapis.com/auth/cloud-platform'
            result: get_response
            next: extract_notebook_details

        - extract_notebook_details:
            call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
            args:
               workflow_id: workflow-workbench-standardise-get-output
               argument:
                   get_response: ${get_response}
            result: get_execution_results
            next: add_firestore_document     

        # Check if we need to add a Firestore Document
        - add_firestore_document:
            switch:
                - condition: ${add_firestore_doc == False}
                  next: update_bindings
                - condition: ${add_firestore_doc == True}
                  next: create_firestore_document
        
        - create_firestore_document:
            call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
            args:
                workflow_id: workflow-workbench-patch-firestore-doc-user-focussed
                argument:
                    firestore_project_id: ${firestore_project_id}
                    instance: ${get_execution_results}
            result: fs_execution_result
            next: update_bindings


        - update_bindings:
            steps:
                - update_wip_dataset:
                    call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
                    args:
                        workflow_id: workflow-bigquery-dataset-binding
                        argument:
                            project_id: ${project_id}
                            dataset_id: ${wip_dataset}
                            role_id: ${analyst_wip_dataset_role_id}
                            service_account_emails: ${[service_account_email]}
                # need to be able to list models to use BQ tool
                - update_wip_dataset_models:
                    call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
                    args:
                        workflow_id: workflow-bigquery-dataset-binding
                        argument:
                            project_id: ${project_id}
                            dataset_id: ${wip_dataset}
                            role_id: "projects/sandbox-pughd/roles/test.analysis.bq.model.user"
                            service_account_emails: ${[service_account_email]}
                - update_review_dataset:
                    call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
                    args:
                        workflow_id: workflow-bigquery-dataset-binding
                        argument:
                            project_id: ${project_id}
                            dataset_id: ${review_dataset}
                            role_id: ${analyst_wip_dataset_role_id}
                            service_account_emails: ${[service_account_email]}
                - update_wip_bucket:
                    call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
                    args:
                        workflow_id: workflow--storage-binding
                        argument:
                            project_id: ${project_id}
                            bucket: ${wip_bucket}
                            role_id: ${analyst_wip_bucket_role_id}
                            members: ${["serviceAccount:"+service_account_email]}   
                - update_review_bucket:
                    call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
                    args:
                        workflow_id: workflow--storage-binding
                        argument:
                            project_id: ${project_id}
                            bucket: ${review_bucket}
                            role_id: ${analyst_wip_bucket_role_id}
                            members: ${["serviceAccount:"+service_account_email]}                         
            next: update_principal_list     

        - update_principal_list:
            call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
            args:
                workflow_id: workflow-update-storage-object
                argument:
                    bucket_id: "sandbox-pughd-tfstate"
                    object_id: "instance_sa_email_list.txt"
                    content: ${ "," + service_account_email }
                    type: "append"    
            next: complete

        - complete:
            steps:
            - format_output:
                assign:
                    - datasets:
                        - ${wip_dataset}
                    - complete_response:
                        "firestore_status": 
                            "added_to_firestore_flag": ${add_firestore_doc}
                            "firestore_create_response":
                                ${fs_execution_result}
                        "create_status": ${create_status}    
                        "create_response":
                            ${create_response}
                        "get_response":    
                            ${get_response}
                        "instance_summary": ${get_execution_results}  
            - output:  
                return: ${complete_response}
