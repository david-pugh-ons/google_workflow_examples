# This is a sample workflow to list all notebooks for a given project
# It will find all notebooks on v1 (user managed) and v2 (workbench instance) for a
# project in zones a,b and c
# It then adds/updates couments in a given Firestore collection based on teh notebooks found

# This workflow gets the project and region from env variables
# A region is retrieved from the GOOGLE_CLOUD_LOCATION system variable
# If the project is not given as an input, the project of the calling workflow project
# The full instance name is built from the instance name in the form
# projects/{projectId}/locations/{location}/instances/{instanceId}
#


main:
  params: [input]
  steps:
    - get_inputs:
        assign:
          - project_id: ${default(map.get(input, "project_id"), sys.get_env("GOOGLE_CLOUD_PROJECT_ID"))}
          - firestore_collection: ${default(map.get(input, "firestore_collection"), "user")}
          - firestore_project_id: ${default(map.get(input, "firestore_project_id"), project_id)}
          - research_area:  ${default(map.get(input, "research_area"), Null)}

    - init:
        assign:
            - region: ${sys.get_env("GOOGLE_CLOUD_LOCATION")}
            - action: "list"
            - all_notebooks: []
            - nb_zones: ["a", "b", "c"]
            - nb_apis: ["v1", "v2"]
            - listResult: []
            - i: 0 
            - j: 0
            - base_url: "https://notebooks.googleapis.com/"
            - database: "(default)"
            - datetime_now: ${time.format(sys.now())}

    # To list all notebooks you need to iterate through all zones in both V1 and V2 for the given project
    - loop_all_instances:

          for:
            value: zne         
            in: ${nb_zones}
  
            steps:
              - loop_through_apis:

                    for:
                            value: api
                            in: ${nb_apis}
                            steps:
                              - list_nb_all:
                                  call: http.get
                                  args:
                                    url: ${base_url+api+"/projects/"+project_id+"/locations/"+region+"-"+zne+"/instances"} 
                                    auth:
                                      type: OAuth2
                                      scopes: 'https://www.googleapis.com/auth/cloud-platform'
                                  result: listResult

                              - gather_results:
                                  try:
                                    parallel:
                                      shared: [all_notebooks] 
                                      for:
                                        value: instance
                                        in: ${listResult.body.instances}
                                        steps:
                              
                                          - get_instance_details:
                                              call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
                                              args:
                                                workflow_id: workflow-workbench-standardise-get-output
                                                argument:
                                                    get_response_body: ${instance}
                                                    research_area: ${research_area}
                                              result: extraction_execution_results  

                                          - collate_results:  
                                              assign: 
                                                - all_notebooks: ${list.concat(all_notebooks, instance)}
                                            
                                          - update_firestore_document:
                                              call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
                                              args:
                                                  workflow_id: workflow-workbench-patch-firestore-doc-user-focussed
                                                  argument:
                                                      firestore_project_id: ${firestore_project_id}
                                                      collection: ${firestore_collection}
                                                      instance: ${extraction_execution_results}
                                              result: fs_execution_result
                                  except:
                                    as: e



    - complete:
        return: ${all_notebooks}
